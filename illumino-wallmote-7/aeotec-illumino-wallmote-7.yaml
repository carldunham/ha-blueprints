# Modified from Robin Smidsr√∏d's great Wallmote Quad blueprint (robinsmidsrod/zwavejs-aeon-labs-aeotec-zw130-wallmote-quad-all-scenes-supported.yaml)
#
blueprint:
  name: ZWaveJS - Aeotec illumino WallMote 7 scene controller
  description: |
    Perform actions when Aeotec illumino WallMote 7 buttons are interacted with.

    This device supports single tap, release and hold for two buttons (typically used for on and off).
    It also has support for 2x-5x taps as actions.

    The release action is equivalent to a long tap.

    A release action is always triggered after a hold action, which makes
    them a bit tricky to use. The hold action is repeated as long as the
    button is held down.

  domain: automation
  input:
    zwavejs_device:
      name: ZWaveJS Device
      description: The Aeotec illumino WallMote 7 to listen for events on.
      selector:
        device:
          integration: zwave_js
          manufacturer: 'Aeotec Ltd.'
          model: ZWA022
    tap_top_actions:
      name: Tap Top Actions
      selector:
        action:
      default: []
    tap_bottom_actions:
      name: Tap Bottom Actions
      selector:
        action:
      default: []
    release_top_actions:
      name: Release Top Actions
      selector:
        action:
      default: []
    release_bottom_actions:
      name: Release Bottom Actions
      selector:
        action:
      default: []
    hold_top_actions:
      name: Hold Top Actions
      selector:
        action:
      default: []
    hold_bottom_actions:
      name: Hold Bottom Actions
      selector:
        action:
      default: []
    2x_tap_top_actions:
      name: Double-Tap Top Actions
      selector:
        action:
      default: []
    2x_tap_bottom_actions:
      name: Double-Tap Bottom Actions
      selector:
        action:
      default: []
    3x_tap_top_actions:
      name: Triple-Tap Top Actions
      selector:
        action:
      default: []
    3x_tap_bottom_actions:
      name: Triple-Tap Bottom Actions
      selector:
        action:
      default: []
    4x_tap_top_actions:
      name: Quadruple-Tap Top Actions
      selector:
        action:
      default: []
    4x_tap_bottom_actions:
      name: Quadruple-Tap Bottom Actions
      selector:
        action:
      default: []
    5x_tap_top_actions:
      name: Quintuple-Tap (5x) Top Actions
      selector:
        action:
      default: []
    5x_tap_bottom_actions:
      name: Quintuple-Tap (5x) Bottom Actions
      selector:
        action:
      default: []

mode: single

# If you haven't upgraded to 2021.4.0 or newer yet, you'll need to use this trigger code instead
#trigger:
#  - platform: event
#    event_type: zwave_js_event
#    event_data:
#      type: value_notification

trigger:
  - platform: event
    event_type: zwave_js_value_notification

variables:
  logger: blueprint.zwavejs_scene_activation
  zwavejs_device: !input zwavejs_device

action:
  - choose:
      # IF triggered device_id is zwavejs_device id
      - conditions:
          - condition: template
            value_template: '{{ trigger.event.data.device_id == zwavejs_device }}'
          - condition: template
            value_template: "{{ trigger.event.data.command_class_name == 'Central Scene' }}"
        sequence:
          - choose:
              # IF tap top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyPressed' }}"
                sequence: !input tap_top_actions
              # IF tap bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyPressed' }}"
                sequence: !input tap_bottom_actions
              # IF release top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyReleased' }}"
                sequence: !input release_top_actions
              # IF release bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyReleased' }}"
                sequence: !input release_bottom_actions
              # IF hold top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyHeldDown' }}"
                sequence: !input hold_top_actions
              # IF hold bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyHeldDown' }}"
                sequence: !input hold_bottom_actions
              # IF double-tap top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyPressed2x' }}"
                sequence: !input 2x_tap_top_actions
              # IF double-tap bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyPressed2x' }}"
                sequence: !input 2x_tap_bottom_actions
              # IF triple-tap top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyPressed3x' }}"
                sequence: !input 3x_tap_top_actions
              # IF triple-tap bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyPressed3x' }}"
                sequence: !input 3x_tap_bottom_actions
              # IF quadruple-tap top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyPressed4x' }}"
                sequence: !input 4x_tap_top_actions
              # IF quadruple-tap bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyPressed4x' }}"
                sequence: !input 4x_tap_bottom_actions
              # IF quintuple-tap top
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 001' and trigger.event.data.value == 'KeyPressed5x' }}"
                sequence: !input 5x_tap_top_actions
              # IF quintuple-tap bottom
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.label == 'Scene 002' and trigger.event.data.value == 'KeyPressed5x' }}"
                sequence: !input 5x_tap_bottom_actions
            # ELSE: unhandled scene label/value
            default:
              - service: system_log.write
                data:
                  level: debug
                  logger: '{{ logger }}'
                  message: "Activated scene '{{ trigger.event.data.label }}' with value '{{ trigger.event.data.value }}' for node '{{ zwavejs_device }}' ({{ trigger.event.data.node_id }})"
    # ELSE: unhandled zwavejs event
    default: []
